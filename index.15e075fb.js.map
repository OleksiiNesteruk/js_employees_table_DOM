{"mappings":"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AEA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,IAAM,EAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAExB,GAIL,EAAkB,EACpB,GAEA,EAAK,gBAAgB,CAAC,SAnII,SAAC,CAA3B,EACE,EAAE,cAAc,GAEhB,IAAM,EAAW,IAAI,SAAS,GAEzB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAsB,EAAS,OAAO,EAAA,CAAA,OAAA,QAAA,CAAA,GAAtC,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA0C,CAA1C,I,EAAA,G,EAAA,EAAA,KAAA,C,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,EAAA,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,EAAA,G,E,EAAA,I,A,W,M,A,U,6I,KAAO,EAAA,CAAA,CAAA,EAAA,CAAK,EAAZ,CAAA,CAAA,EAAA,CACG,EAAkB,EAAa,EAAO,GAE5C,GAAI,EAAiB,CACnB,EAAiB,EAAgB,IAAI,CAAE,EAAgB,OAAO,EAE9D,MACF,CACF,C,C,M,E,CARK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAWL,IAAM,EAAkB,EADT,EAAS,GAAG,CAAC,WAGtB,EAAS,SAAS,aAAa,CAAC,MAEtC,EAAS,OAAO,CAAC,SAAC,CAAA,CAAO,CAAzB,EACE,IAAM,EAAO,SAAS,aAAa,CAAC,KAEhC,AAAQ,CAAA,WAAR,EACF,EAAK,WAAW,CAAG,EAEnB,EAAK,WAAW,CAAG,EAGrB,EAAO,WAAW,CAAC,EACrB,GAEA,EAAM,WAAW,CAAC,GAClB,EAAK,KAAK,GAEV,EAAiB,UAAW,8BAC9B,GAiGA,EAAM,gBAAgB,CAAC,WAAY,SAAC,CAApC,EAGE,EAFa,EAAE,MAAM,CAAC,OAAO,CAAC,MAGhC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tableHeaders = table.querySelectorAll(\"th\");\nvar tbody = table.tBodies[0];\nvar sortDirection = Array.from(tableHeaders).map(function() {\n    return \"asc\";\n});\nvar getFormattedSalary = function(num) {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0\n    }).format(num);\n};\n// <-- SORTING -->\nvar sortTable = function(columnIndex) {\n    var rows = Array.from(tbody.rows);\n    var currentDirection = sortDirection[columnIndex];\n    var nextDirection = currentDirection === \"asc\" ? \"desc\" : \"asc\";\n    sortDirection.fill(\"asc\");\n    sortDirection[columnIndex] = nextDirection;\n    rows.sort(function(a, b) {\n        var valueA = a.cells[columnIndex].textContent.trim();\n        var valueB = b.cells[columnIndex].textContent.trim();\n        var numberA = parseFloat(valueA.replace(/[$,]/g, \"\"));\n        var numberB = parseFloat(valueB.replace(/[$,]/g, \"\"));\n        if (!isNaN(numberA) && !isNaN(numberB)) return currentDirection === \"asc\" ? numberA - numberB : numberB - numberA;\n        return currentDirection === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\n    });\n    tbody.innerHTML = \"\";\n    rows.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n};\n// <-- ACTIVE CLASS -->\nvar toggleActiveClass = function(row) {\n    var rows = Array.from(tbody.rows);\n    rows.forEach(function(r) {\n        return r.classList.remove(\"active\");\n    });\n    row.classList.toggle(\"active\");\n};\n// <-- FORM -->\nvar form = document.createElement(\"form\");\nform.classList.add(\"new-employee-form\");\nvar formInputs = [\n    {\n        name: \"name\",\n        label: \"Name\",\n        type: \"text\"\n    },\n    {\n        name: \"position\",\n        label: \"Position\",\n        type: \"text\"\n    },\n    {\n        name: \"office\",\n        label: \"Office\",\n        type: \"select\",\n        options: [\n            \"Tokyo\",\n            \"Singapore\",\n            \"London\",\n            \"New York\",\n            \"Edinburgh\",\n            \"San Francisco\"\n        ]\n    },\n    {\n        name: \"age\",\n        label: \"Age\",\n        type: \"number\"\n    },\n    {\n        name: \"salary\",\n        label: \"Salary\",\n        type: \"number\"\n    }\n];\nformInputs.forEach(function(input) {\n    var label = document.createElement(\"label\");\n    label.textContent = \"\".concat(input.label, \": \");\n    var inputElement = input.type === \"select\" ? document.createElement(\"select\") : document.createElement(\"input\");\n    inputElement.name = input.name;\n    inputElement.setAttribute(\"data-qa\", input.name);\n    if (input.type === \"select\") input.options.forEach(function(optionText) {\n        var option = document.createElement(\"option\");\n        option.text = optionText;\n        inputElement.add(option);\n    });\n    else inputElement.type = input.type;\n    label.appendChild(inputElement);\n    form.appendChild(label);\n});\nvar submitButton = document.createElement(\"button\");\nsubmitButton.type = \"submit\";\nsubmitButton.textContent = \"Save to table\";\nform.appendChild(submitButton);\ndocument.body.appendChild(form);\n// <-- VALIDATION -->\nvar validateData = function(value, fieldName) {\n    switch(fieldName){\n        case \"name\":\n            if (value.trim().length < 4) return {\n                type: \"error\",\n                message: \"Name must be at least 4 characters long\"\n            };\n            break;\n        case \"age\":\n            if (isNaN(value) || value < 18 || value > 90) return {\n                type: \"error\",\n                message: \"Age must be between 18 and 90\"\n            };\n            break;\n        case \"position\":\n            if (value.trim().length === 0) return {\n                type: \"error\",\n                message: \"Position cannot be empty\"\n            };\n            break;\n        case \"salary\":\n            var salary = value.replace(/[$,]/g, \"\");\n            if (isNaN(salary) || salary < 0) return {\n                type: \"error\",\n                message: \"Salary must be a positive number\"\n            };\n            break;\n        default:\n            break;\n    }\n};\n// <-- SUBMIT FORM -->\nvar formSubmitHandler = function(e) {\n    e.preventDefault();\n    var formData = new FormData(form);\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = formData.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            var validationError = validateData(value, key);\n            if (validationError) {\n                showNotification(validationError.type, validationError.message);\n                return;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var salary = formData.get(\"salary\");\n    var formattedSalary = getFormattedSalary(salary);\n    var newRow = document.createElement(\"tr\");\n    formData.forEach(function(value, key) {\n        var cell = document.createElement(\"td\");\n        if (key === \"salary\") cell.textContent = formattedSalary;\n        else cell.textContent = value;\n        newRow.appendChild(cell);\n    });\n    tbody.appendChild(newRow);\n    form.reset();\n    showNotification(\"success\", \"Employee added successfully\");\n};\n// <-- NOTIFICATION -->\nvar showNotification = function(type, message) {\n    var notification = document.createElement(\"div\");\n    notification.classList.add(\"notification\", type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    var title = document.createElement(\"h3\");\n    title.classList.add(\"title\");\n    title.textContent = message;\n    notification.appendChild(title);\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 2000);\n};\n// <-- EDITING -->\nvar currentlyEditedCell = null;\nvar editCell = function(cell) {\n    if (currentlyEditedCell) return;\n    var currentText = cell.textContent;\n    var input = document.createElement(\"input\");\n    input.classList.add(\"cell-input\");\n    input.value = currentText;\n    cell.textContent = \"\";\n    cell.appendChild(input);\n    input.focus();\n    currentlyEditedCell = cell;\n    input.addEventListener(\"blur\", function() {\n        saveCell(input);\n    });\n    input.addEventListener(\"keydown\", function(e) {\n        if (e.key === \"Enter\") saveCell(input);\n    });\n};\nvar saveCell = function(input) {\n    var cell = input.parentElement;\n    var newValue = input.value.trim();\n    var columnIndex = Array.from(cell.parentElement.cells).indexOf(cell);\n    var fieldName = tableHeaders[columnIndex].textContent.trim().toLowerCase();\n    var validationError = validateData(newValue, fieldName);\n    if (validationError) {\n        showNotification(validationError.type, validationError.message);\n        input.focus();\n        return;\n    }\n    if (fieldName === \"salary\") {\n        newValue = newValue.replace(/[$,]/g, \"\");\n        newValue = getFormattedSalary(newValue);\n    }\n    cell.textContent = newValue;\n    currentlyEditedCell = null;\n};\n// <-- EVENT LISTENERS -->\ntableHeaders.forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        return sortTable(index);\n    });\n});\ntbody.addEventListener(\"click\", function(e) {\n    var row = e.target.closest(\"tr\");\n    if (!row) return;\n    toggleActiveClass(row);\n});\nform.addEventListener(\"submit\", formSubmitHandler);\ntbody.addEventListener(\"dblclick\", function(e) {\n    var cell = e.target.closest(\"td\");\n    editCell(cell);\n});\n\n//# sourceMappingURL=index.15e075fb.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\nconst tableHeaders = table.querySelectorAll('th');\nconst tbody = table.tBodies[0];\nconst sortDirection = Array.from(tableHeaders).map(() => 'asc');\n\nconst getFormattedSalary = (num) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  }).format(num);\n};\n\n// <-- SORTING -->\nconst sortTable = (columnIndex) => {\n  const rows = Array.from(tbody.rows);\n\n  const currentDirection = sortDirection[columnIndex];\n  const nextDirection = currentDirection === 'asc' ? 'desc' : 'asc';\n\n  sortDirection.fill('asc');\n  sortDirection[columnIndex] = nextDirection;\n\n  rows.sort((a, b) => {\n    const valueA = a.cells[columnIndex].textContent.trim();\n    const valueB = b.cells[columnIndex].textContent.trim();\n\n    const numberA = parseFloat(valueA.replace(/[$,]/g, ''));\n    const numberB = parseFloat(valueB.replace(/[$,]/g, ''));\n\n    if (!isNaN(numberA) && !isNaN(numberB)) {\n      return currentDirection === 'asc' ? numberA - numberB : numberB - numberA;\n    }\n\n    return currentDirection === 'asc'\n      ? valueA.localeCompare(valueB)\n      : valueB.localeCompare(valueA);\n  });\n\n  tbody.innerHTML = '';\n  rows.forEach((row) => tbody.appendChild(row));\n};\n\n// <-- ACTIVE CLASS -->\nconst toggleActiveClass = (row) => {\n  const rows = Array.from(tbody.rows);\n\n  rows.forEach((r) => r.classList.remove('active'));\n  row.classList.toggle('active');\n};\n\n// <-- FORM -->\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\n\nconst formInputs = [\n  { name: 'name', label: 'Name', type: 'text' },\n  { name: 'position', label: 'Position', type: 'text' },\n  {\n    name: 'office',\n    label: 'Office',\n    type: 'select',\n    options: [\n      'Tokyo',\n      'Singapore',\n      'London',\n      'New York',\n      'Edinburgh',\n      'San Francisco',\n    ],\n  },\n  { name: 'age', label: 'Age', type: 'number' },\n  { name: 'salary', label: 'Salary', type: 'number' },\n];\n\nformInputs.forEach((input) => {\n  const label = document.createElement('label');\n\n  label.textContent = `${input.label}: `;\n\n  const inputElement =\n    input.type === 'select'\n      ? document.createElement('select')\n      : document.createElement('input');\n\n  inputElement.name = input.name;\n  inputElement.setAttribute('data-qa', input.name);\n\n  if (input.type === 'select') {\n    input.options.forEach((optionText) => {\n      const option = document.createElement('option');\n\n      option.text = optionText;\n      inputElement.add(option);\n    });\n  } else {\n    inputElement.type = input.type;\n  }\n\n  label.appendChild(inputElement);\n  form.appendChild(label);\n});\n\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'submit';\nsubmitButton.textContent = 'Save to table';\nform.appendChild(submitButton);\n\ndocument.body.appendChild(form);\n\n// <-- VALIDATION -->\nconst validateData = (value, fieldName) => {\n  switch (fieldName) {\n    case 'name':\n      if (value.trim().length < 4) {\n        return {\n          type: 'error',\n          message: 'Name must be at least 4 characters long',\n        };\n      }\n      break;\n    case 'age':\n      if (isNaN(value) || value < 18 || value > 90) {\n        return {\n          type: 'error',\n          message: 'Age must be between 18 and 90',\n        };\n      }\n      break;\n    case 'position':\n      if (value.trim().length === 0) {\n        return {\n          type: 'error',\n          message: 'Position cannot be empty',\n        };\n      }\n      break;\n    case 'salary':\n      const salary = value.replace(/[$,]/g, '');\n\n      if (isNaN(salary) || salary < 0) {\n        return {\n          type: 'error',\n          message: 'Salary must be a positive number',\n        };\n      }\n      break;\n    default:\n      break;\n  }\n};\n\n// <-- SUBMIT FORM -->\nconst formSubmitHandler = (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(form);\n\n  for (const [key, value] of formData.entries()) {\n    const validationError = validateData(value, key);\n\n    if (validationError) {\n      showNotification(validationError.type, validationError.message);\n\n      return;\n    }\n  }\n\n  const salary = formData.get('salary');\n  const formattedSalary = getFormattedSalary(salary);\n\n  const newRow = document.createElement('tr');\n\n  formData.forEach((value, key) => {\n    const cell = document.createElement('td');\n\n    if (key === 'salary') {\n      cell.textContent = formattedSalary;\n    } else {\n      cell.textContent = value;\n    }\n\n    newRow.appendChild(cell);\n  });\n\n  tbody.appendChild(newRow);\n  form.reset();\n\n  showNotification('success', 'Employee added successfully');\n};\n\n// <-- NOTIFICATION -->\nconst showNotification = (type, message) => {\n  const notification = document.createElement('div');\n\n  notification.classList.add('notification', type);\n  notification.setAttribute('data-qa', 'notification');\n\n  const title = document.createElement('h3');\n\n  title.classList.add('title');\n  title.textContent = message;\n  notification.appendChild(title);\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 2000);\n};\n\n// <-- EDITING -->\nlet currentlyEditedCell = null;\n\nconst editCell = (cell) => {\n  if (currentlyEditedCell) {\n    return;\n  }\n\n  const currentText = cell.textContent;\n  const input = document.createElement('input');\n\n  input.classList.add('cell-input');\n\n  input.value = currentText;\n  cell.textContent = '';\n  cell.appendChild(input);\n  input.focus();\n\n  currentlyEditedCell = cell;\n\n  input.addEventListener('blur', () => {\n    saveCell(input);\n  });\n\n  input.addEventListener('keydown', (e) => {\n    if (e.key === 'Enter') {\n      saveCell(input);\n    }\n  });\n};\n\nconst saveCell = (input) => {\n  const cell = input.parentElement;\n  let newValue = input.value.trim();\n\n  const columnIndex = Array.from(cell.parentElement.cells).indexOf(cell);\n  const fieldName = tableHeaders[columnIndex].textContent.trim().toLowerCase();\n\n  const validationError = validateData(newValue, fieldName);\n\n  if (validationError) {\n    showNotification(validationError.type, validationError.message);\n\n    input.focus();\n\n    return;\n  }\n\n  if (fieldName === 'salary') {\n    newValue = newValue.replace(/[$,]/g, '');\n    newValue = getFormattedSalary(newValue);\n  }\n\n  cell.textContent = newValue;\n\n  currentlyEditedCell = null;\n};\n\n// <-- EVENT LISTENERS -->\ntableHeaders.forEach((header, index) => {\n  header.addEventListener('click', () => sortTable(index));\n});\n\ntbody.addEventListener('click', (e) => {\n  const row = e.target.closest('tr');\n\n  if (!row) {\n    return;\n  }\n\n  toggleActiveClass(row);\n});\n\nform.addEventListener('submit', formSubmitHandler);\n\ntbody.addEventListener('dblclick', (e) => {\n  const cell = e.target.closest('td');\n\n  editCell(cell);\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","tableHeaders","querySelectorAll","tbody","tBodies","sortDirection","from","map","getFormattedSalary","num","Intl","NumberFormat","style","currency","minimumFractionDigits","format","sortTable","columnIndex","rows","currentDirection","fill","sort","a","b","valueA","cells","textContent","trim","valueB","numberA","parseFloat","replace","numberB","isNaN","localeCompare","innerHTML","forEach","row","appendChild","toggleActiveClass","r","classList","remove","toggle","form","createElement","add","formInputs","name","label","type","options","input","concat","inputElement","setAttribute","optionText","option","text","submitButton","body","validateData","value","fieldName","message","salary","showNotification","notification","title","setTimeout","currentlyEditedCell","editCell","cell","currentText","focus","addEventListener","saveCell","e","key","parentElement","newValue","indexOf","toLowerCase","validationError","header","index","target","closest","preventDefault","formData","FormData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_step_value","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","call","push","err","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","slice","constructor","test","_non_iterable_rest","TypeError","return","formattedSalary","get","newRow","reset"],"version":3,"file":"index.15e075fb.js.map"}